% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fabOF.R
\name{fabOF}
\alias{fabOF}
\title{fabOF}
\usage{
fabOF(
  formula,
  data,
  scores = NULL,
  importance = FALSE,
  importance.reps = 100,
  ranger.control = NULL
)
}
\arguments{
\item{formula}{Model formula as object of class \code{formula} or \code{character}.}

\item{data}{Training data as object of class \code{data.frame} or \code{matrix}.}

\item{scores}{Numeric scores assigned to ordinal response categories.}

\item{importance}{Compute permutation variable importance based on weighted Cohen's Kappa with linear weights (see Buczak, 2024).}

\item{importance.reps}{Replications used for computing variable importance. High values increase stability of variable importance results but increase runtime.}

\item{ranger.control}{List of arguments to pass to \code{ranger} function (e.g., num.trees, mtry, etc.). See \link[ranger]{ranger} documentation for a comprehensive overview of specifiable parameters.}
}
\value{
Fitted model object of class fabOF containing
   \item{\code{ranger.fit}}{Forest object trained using numeric scores as target.}
   \item{\code{category.borders}}{Numeric category borders determined by frequency-based heuristic.}
   \item{\code{categories}}{Response categories of ordinal target variable.}
   \item{\code{category.scores}}{Numeric scores assigned to ordinal response categories.}
   \item{\code{category.frequencies}}{Frequencies of ordinal response categories in the training data.}
   \item{\code{variable.importance}}{Permutation variable importance values.}
   \item{\code{target}}{Target variable name.}
   \item{\code{call}}{Function call.}
}
\description{
Fits a frequency adjusted borders Ordinal Forest (fabOF) as described in Buczak (2024).
Designed for ordinal prediction, fabOF assigns numeric scores to the ordinal response categories and fits a regression
random forest (RF; Breiman, 2001) on these numeric scores (similar to Ordinal Forest; Hornung, 2020). For fitting the RF model, the \code{ranger}
package (Wright & Ziegler, 2017) is used. See 'Details' section below for more information on fabOF.
}
\details{
Similar to Ordinal Forest (OF; Hornung, 2020), fabOF assumes that the ordinal response results
from an underlying latent numeric variable which can not be observed directly, but can be approximated.
To this end, all ordinal response categories are characterized by a numeric category interval and a
representative numeric category score. These scores are assigned to the ordinal response categories
and used to train a regression RF. For new observations, the numeric RF predictions are transformed
into ordinal response categories using the category interval borders.

The numeric scores to be assigned to the ordinal response categories can be assigned via the \code{scores} argument.
By default, the scores 1, 2, ..., k are used for k categories. The category borders are derived by a
heuristic based on the cumulative relative frequencies of the ordinal response categories in the training data.
Having trained the regression RF, numeric out-of-bag (OOB) predictions for all training observations are generated.
For the j-th category, the lower category border is then chosen as the quantile of the OOB predictions
with the cumulative relative frequency up to category j-1 serving as the probability. The upper category border
is analogously chosen as the quantile of the OOB predictions
with the cumulative relative frequency up to category j serving as the probability. For the lower and upper
bound of all category borders, the minimum and maximum numeric score are chosen, respectively. For
a more detailed description, see Buczak (2024).

For fitting the regression RF, the \code{ranger} package (Wright & Ziegler, 2017) is used. Arguments
for \code{ranger} (e.g., \code{num.trees} or \code{mtry}) can be passed via the \code{ranger.control} argument as a list with named entries
corresponding to the respective \code{ranger} parameter. See \code{ranger} documentation for an overview
of all parameters and their description. If left unspecified in the \code{ranger.control} argument,
all parameters are initialized using their respective default from the \code{ranger} package.
}
\examples{
\dontrun{
# Example from Tutz (2021)
library(mlbench)
data(BostonHousing)
data <- BostonHousing[, names(BostonHousing) != "medv"]
data$medv_ord <- 1
data$medv_ord[BostonHousing$medv > 15 & BostonHousing$medv <= 19] <- 2
data$medv_ord[BostonHousing$medv > 19 & BostonHousing$medv <= 22] <- 3
data$medv_ord[BostonHousing$medv > 22 & BostonHousing$medv <= 25] <- 4
data$medv_ord[BostonHousing$medv > 25 & BostonHousing$medv <= 32] <- 5
data$medv_ord[BostonHousing$medv > 32] <- 6
data$medv_ord <- as.factor(data$medv_ord)

fabOF.boston <- fabOF(medv_ord ~ . , data = data)

fabOF.boston}
}
\references{
\itemize{
  \item Buczak, P. (2024). fabOF: A Novel Tree Ensemble Method for Ordinal Prediction. OSF Pre-print. \doi{10.31219/osf.io/h8t4p}.
  \item Wright, M. N. & Ziegler, A. (2017). ranger: A Fast Implementation of Random Forests for High Dimensional Data in C++ and R. J Stat Softw 77:1-17. \doi{10.18637/jss.v077.i01}.
  \item Breiman, L. (2001). Random Forests. Mach Learn, 45:5-32. \doi{10.1023/A:1010933404324}.
  \item Hornung, R. (2020). Ordinal Forests. J Classif. 37: 4-17. \doi{10.1007/s00357-018-9302-x}.
  }
}
\author{
Philip Buczak
}
